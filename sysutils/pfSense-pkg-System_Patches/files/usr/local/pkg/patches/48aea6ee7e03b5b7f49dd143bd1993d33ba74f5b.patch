commit 48aea6ee7e03b5b7f49dd143bd1993d33ba74f5b
Author: jim-p <jimp@netgate.com>
Date:   Thu Jan 18 15:45:19 2024 -0500

    IPsec P1/P2 delete corrections. Fixes #15171

diff --git a/src/etc/inc/ipsec.inc b/src/etc/inc/ipsec.inc
index be07c8342f..001c699302 100644
--- a/src/etc/inc/ipsec.inc
+++ b/src/etc/inc/ipsec.inc
@@ -3409,4 +3409,70 @@ function ipsec_get_rand_time($entry) {
 	return ipsec_get_over_time($entry);
 }
 
+/* Delete a list of IPsec P1 and related P2 entries
+ * Takes no action if any of the passed items are assigned VTI interfaces
+ * Caller must write the config after if the function succeeded.
+ */
+function delete_p1_and_children($p1list = []) {
+	global $input_errors;
+
+	if (!is_array($p1list) || !count($p1list)) {
+		/* Nothing to do */
+		return 0;
+	}
+	$delp1ids = [];
+	$delp2ids = [];
+
+	/* Check for relevant P1 and P2 entries to remove */
+	foreach ($p1list as $p1idx) {
+		$p1_has_vti = false;
+		$ikeid = config_get_path('ipsec/phase1/' . $p1idx . '/ikeid');
+
+		/* Find relevant P2 entries */
+		foreach (config_get_path('ipsec/phase2', []) as $p2idx => $p2) {
+			/* Flag and remove invalid entries */
+			if (empty($p2) || !is_array($p2)) {
+				$delp2ids[] = $p2idx;
+				continue;
+			}
+			if ($p2['ikeid'] == $ikeid) {
+				if (is_interface_ipsec_vti_assigned($p2)) {
+					/* This entry is active VTI and cannot be deleted! */
+					$p1_has_vti = true;
+				} else {
+					$delp2ids[] = $p2idx;
+				}
+			}
+		}
+
+		if ($p1_has_vti) {
+			$input_errors[] = gettext("Cannot delete a Phase 1 which contains an active VTI Phase 2 with an interface assigned. Remove the interface assignment before deleting this P1.");
+		} else {
+			$delp1ids[] = $p1idx;
+		}
+	}
+
+	/* If there are errors, take no actions */
+	if (!empty($input_errors)) {
+		return 0;
+	}
+
+	/* Remove P1 entries */
+	foreach ($delp1ids as $delp1) {
+		/* remove static route if interface is not WAN */
+		if (config_get_path('ipsec/phase1/' . $delp1 . '/interface') <> "wan") {
+			route_del(config_get_path('ipsec/phase1/' . $delp1 . '/remote-gateway'));
+		}
+		config_del_path('ipsec/phase1/' . $delp1);
+	}
+	/* Remove P2 entries */
+	foreach ($delp2ids as $dp2idx) {
+		config_del_path('ipsec/phase2/' . $dp2idx);
+	}
+
+	/* Return the total number of entries removed. */
+	return count($delp1ids) + count($delp2ids);
+
+}
+
 ?>
diff --git a/src/usr/local/www/vpn_ipsec.php b/src/usr/local/www/vpn_ipsec.php
index 6018faf6c2..50b580f4f2 100644
--- a/src/usr/local/www/vpn_ipsec.php
+++ b/src/usr/local/www/vpn_ipsec.php
@@ -60,12 +60,12 @@ if ($_POST['apply']) {
 } else if (isset($_POST['del'])) {
 	/* delete selected p1 entries */
 	if (is_array($_POST['p1entry']) && count($_POST['p1entry'])) {
-		foreach ($_POST['p1entry'] as $p1entrydel) {
-			config_del_path('ipsec/phase1/' . $p1entrydel);
-			$items_deleted = true;
-		}
-		if (write_config(gettext("Deleted selected IPsec Phase 1 entries."))) {
-			mark_subsystem_dirty('ipsec');
+		$delcount = delete_p1_and_children($_POST['p1entry']);
+
+		if ($delcount > 0) {
+			if (write_config(gettext("Deleted selected IPsec Phase 1 and related Phase 2 entries."))) {
+				mark_subsystem_dirty('ipsec');
+			}
 		}
 	}
 } else if (isset($_POST['delp2'])) {
@@ -79,8 +79,10 @@ if ($_POST['apply']) {
 				$items_deleted = true;
 			}
 		}
-		if (write_config(gettext("Deleted selected IPsec Phase 2 entries."))) {
-			mark_subsystem_dirty('ipsec');
+		if ($items_deleted) {
+			if (write_config(gettext("Deleted selected IPsec Phase 2 entries."))) {
+				mark_subsystem_dirty('ipsec');
+			}
 		}
 	}
 } else  {
@@ -220,35 +222,15 @@ if ($_POST['apply']) {
 			}
 		}
 	} else if (isset($delbtn)) {
-		/* remove static route if interface is not WAN */
-		if (config_get_path('ipsec/phase1/' . $delbtn . '/interface') <> "wan") {
-			route_del(config_get_path('ipsec/phase1/' . $delbtn . '/remote-gateway'));
-		}
+		$delcount = delete_p1_and_children([$delbtn]);
 
-		/* remove all phase2 entries that match the ikeid */
-		$ikeid = config_get_path('ipsec/phase2/' . $delbtn . '/ikeid');
-		$p1_has_vti = false;
-		$delp2ids = array();
-		foreach (config_get_path('ipsec/phase2') as $p2index => $ph2tmp) {
-			if ($ph2tmp['ikeid'] == $ikeid) {
-				if (is_interface_ipsec_vti_assigned($ph2tmp)) {
-					$p1_has_vti = true;
-				} else {
-					$delp2ids[] = $p2index;
-				}
-			}
-		}
-
-		if ($p1_has_vti) {
-			$input_errors[] = gettext("Cannot delete a Phase 1 which contains an active VTI Phase 2 with an interface assigned. Remove the interface assignment before deleting this P1.");
-		} else {
-			foreach ($delp2ids as $dp2idx) {
-				config_del_path('ipsec/phase2/' . $dp2idx);
+		if ($delcount > 0) {
+			/* Use a better description than generic save below */
+			$save = 0;
+			if (write_config(gettext("Deleted selected IPsec Phase 1 and related Phase 2 entries."))) {
+				mark_subsystem_dirty('ipsec');
 			}
-			config_del_path('ipsec/phase1/' . $delbtn);
-			$items_deleted = true;
 		}
-
 	} else if (isset($delbtnp2)) {
 		if (is_interface_ipsec_vti_assigned(config_get_path('ipsec/phase2/' . $delbtnp2)) && (config_get_path('ipsec/phase2/' . $delbtnp2 . '/mode') == 'vti')) {
 			$input_errors[] = gettext("Cannot delete a VTI Phase 2 while the interface is assigned. Remove the interface assignment before deleting this P2.");
